size=0.5, alpha=1)
ggp = ggp + scale_colour_manual(name=NULL,
values=c(raw_data="red", trend="blue", interation_history="grey"))
print(ggp)
pl2 <- ggplot(Cycle) +
theme_bw() +
theme(panel.grid=element_blank()
#axis.text.y = element_blank(),
#axis.ticks.y = element_blank(),
,legend.position = "bottom") +
geom_line(aes(x=date, y=cycle, group=NULL),
size=1, alpha=1, color = "blue")
Cycle <- data.frame(cycle = cycle)
Cycle$date <- Date_series
pl2 <- ggplot(Cycle) +
theme_bw() +
theme(panel.grid=element_blank()
#axis.text.y = element_blank(),
#axis.ticks.y = element_blank(),
,legend.position = "bottom") +
geom_line(aes(x=date, y=cycle, group=NULL),
size=1, alpha=1, color = "blue")
print(pl2)
runApp('D:/mzw/github_repo/Boosted_HP_App')
runApp('D:/mzw/github_repo/Boosted_HP_App')
runApp('D:/mzw/github_repo/Boosted_HP_App')
runApp('D:/mzw/github_repo/Boosted_HP_App')
runApp('D:/mzw/github_repo/Boosted_HP_App')
runApp('D:/mzw/github_repo/Boosted_HP_App')
runApp('D:/mzw/github_repo/Boosted_HP_App')
runApp('D:/mzw/github_repo/Boosted_HP_App')
help(seq)
runApp('D:/mzw/github_repo/Boosted_HP_App')
runApp('D:/mzw/github_repo/Boosted_HP_App')
runApp('D:/mzw/github_repo/Boosted_HP_App')
IRE
BoostedHP(IRE, 1600, Max_iter = 1)
BoostedHP(IRE, 1600, Max_Iter = 1)
x = IRE
lambda = 1600
Max_Iter = 1
iter= TRUE
test_type = "none"
sig_p = 0.050
# Require Package: tseries, expm
library(tseries)
library(expm)
# Require Package: tseries, expm
# Inputs
#   x: a univariate time series
#   lambda: the tuning parameter in the HP filter (base learner). Default is 1600.
#   iter: logical.
#       If iter = FALSE, the function returns the simple HP filter (fit only once).
#       If iter = TRUE, the boosted HP filter.
#   test_type (stopping criterion):
#       If ="adf" or "BIC", the two stopping criteria in the paper.
#       If = "none", iterated until Max_Iter
#   sig_p: the significance level of the ADF test as the stopping criterion.
#           It is useful only when test_type == "adf".
#   Max_Iter: the maximum number of iterations.
# Outputs
#   $cycle: the cyclical components in the final round
#   $trend: the trend component in the final round
#   $trend_hist: the estimated trend in each iteration
#   $iter_num: the total number of iterations
#   $IC_hist: the path of the information criterion along the iterations
#   $adf_p_hist: the path of the ADF test p-value along the iterations
if (!is.numeric(x) || anyNA(x) ) {
stop("argument is not numeric or containing NAs: returning NA")
return(NA_real_)
}
n <- length(x) # data size
I_n <-  diag(n)
D_temp <- rbind(matrix(0, 1, n), diag(1, n - 1, n))
D_temp <- (I_n - D_temp) %*% (I_n - D_temp)
D <- t( D_temp[3:n, ] )
# Equation 4 in PJ
S <- solve( I_n + lambda * D %*% t(D) )
mS = diag(n) - S
## the simple HP-filter
if(iter==FALSE){
message("conducted the simple HP filter")
# get the trend and cycle
x_f <- S %*% x
x_c <- x - x_f
result <-list(cycle = x_c, trend_hist = x_f, trend = x - x_c)
}
if(iter==TRUE) {
if (test_type == "adf"){
message("iterated HP filter with ADF test criterion")
} else if ( test_type == "BIC"){
message( "iterated HP filter with BIC criterion")
}  else if ( test_type == "none" ) {
message( "iterated HP filter until Max_Iter")
}
### ADF test as the stopping criterion
if (test_type =="adf"  ) {
r <- 1
stationary <- FALSE
x_c <- x
x_f <- matrix(0, n, Max_Iter)
adf_p <- rep(0, Max_Iter)
while( (r <= Max_Iter) & (stationary == FALSE)){
x_c <- ( diag(n) - S ) %*% x_c # update
x_f[, r] <- x - x_c
adf_p_r <- adf.test(x_c, alternative = "stationary")$p.value
# x_c is the residual after the mean and linear trend being removed by HP filter
# we use the critical value for the ADF distribution with
# the intercept and linear trend specification
adf_p[r] <- adf_p_r
sig_p = sig_p # + 0.001 # due to the way that R reports the p-value
if(test_type == "adf")   stationary <- (adf_p_r <= sig_p)
# Truncate the storage matrix and vectors
if(stationary == TRUE){
R <- r
x_f <- x_f[, 1:R]
adf_p <- adf_p[1:R]
break
}
r <- r + 1
} # end the while loop
if( r > Max_Iter){
R <- Max_Iter
warning("The number of iterations exceeds the limit.
The residual cycle remains non-stationary.")
}
result <- list( cycle = x_c, trend_hist = x_f,  test_type = test_type,
adf_p_hist= adf_p, iter_num = R,
trend  = x - x_c)
} else  {
# assignment
r <- 0
x_c_r <- x
x_f <- matrix(0, n, Max_Iter + 1)
IC <- rep(0, Max_Iter + 1)
IC_decrease = TRUE
I_S_0 = diag(n) - S
c_HP = I_S_0 %*% x
I_S_r = I_S_0
while( r < Max_Iter + 1) {
r <- r + 1
x_c_r = I_S_r %*% x  # this is the cyclical component after m iterations
x_f[, r] = x - x_c_r
B_r <- diag(n) -  I_S_r
IC[r] =   var (x_c_r ) / var( c_HP ) +  log( n )/ (n - sum(diag (S) ) ) * sum( diag( B_r ) )
I_S_r = I_S_0 %*% I_S_r # update for the next round
if  ( (r >= 2) & (  test_type == "BIC") )  {
if (  IC[r-1] < IC[r] )   { break  }
}
} # end of the while loop
# the message
# final assignment
R = r - 1;
x_f <- as.matrix(x_f[, 1:R])
x_c <- x - x_f[,R]
# browser()
result <- list( cycle = x_c, trend_hist = x_f,  test_type = test_type,
IC_hist = IC, iter_num = R, trend =  x- x_c  )
}
} # end the boosted HP
source("BoostedHP.R")
BoostedHP(IRE, 1600, Max_Iter = 1)
IRE[1]
if(iter==TRUE) {
if (test_type == "adf"){
message("iterated HP filter with ADF test criterion")
} else if ( test_type == "BIC"){
message( "iterated HP filter with BIC criterion")
}  else if ( test_type == "none" ) {
message( "iterated HP filter until Max_Iter")
}
### ADF test as the stopping criterion
if (test_type =="adf"  ) {
r <- 1
stationary <- FALSE
x_c <- x
x_f <- matrix(0, n, Max_Iter)
adf_p <- rep(0, Max_Iter)
while( (r <= Max_Iter) & (stationary == FALSE)){
x_c <- ( diag(n) - S ) %*% x_c # update
x_f[, r] <- x - x_c
adf_p_r <- adf.test(x_c, alternative = "stationary")$p.value
# x_c is the residual after the mean and linear trend being removed by HP filter
# we use the critical value for the ADF distribution with
# the intercept and linear trend specification
adf_p[r] <- adf_p_r
sig_p = sig_p # + 0.001 # due to the way that R reports the p-value
if(test_type == "adf")   stationary <- (adf_p_r <= sig_p)
# Truncate the storage matrix and vectors
if(stationary == TRUE){
R <- r
x_f <- x_f[, 1:R]
adf_p <- adf_p[1:R]
break
}
r <- r + 1
} # end the while loop
if( r > Max_Iter){
R <- Max_Iter
warning("The number of iterations exceeds the limit.
The residual cycle remains non-stationary.")
}
result <- list( cycle = x_c, trend_hist = x_f,  test_type = test_type,
adf_p_hist= adf_p, iter_num = R,
trend  = x - x_c)
} else  {
# assignment
r <- 0
x_c_r <- x
x_f <- matrix(0, n, Max_Iter + 1)
IC <- rep(0, Max_Iter + 1)
IC_decrease = TRUE
I_S_0 = diag(n) - S
c_HP = I_S_0 %*% x
I_S_r = I_S_0
while( r < Max_Iter + 1) {
r <- r + 1
x_c_r = I_S_r %*% x  # this is the cyclical component after m iterations
x_f[, r] = x - x_c_r
B_r <- diag(n) -  I_S_r
IC[r] =   var (x_c_r ) / var( c_HP ) +  log( n )/ (n - sum(diag (S) ) ) * sum( diag( B_r ) )
I_S_r = I_S_0 %*% I_S_r # update for the next round
if  ( (r >= 2) & (  test_type == "BIC") )  {
if (  IC[r-1] < IC[r] )   { break  }
}
} # end of the while loop
# the message
# final assignment
R = r - 1;
x_f <- as.matrix(x_f[, 1:R])
x_c <- x - x_f[,R]
# browser()
result <- list( cycle = x_c, trend_hist = x_f,  test_type = test_type,
IC_hist = IC, iter_num = R, trend =  x- x_c  )
}
} # end the boosted HP
result
BoostedHP(IRE, 1600, Max_Iter = 1)
Max_Iter
x - x_f[,R]
x
r
BoostedHP(IRE, 1600, Max_Iter = 1)
iter_num
R
Max_Iter = 1
if (!is.numeric(x) || anyNA(x) ) {
stop("argument is not numeric or containing NAs: returning NA")
return(NA_real_)
}
## generating trend operator matrix "S"
n <- length(x) # data size
I_n <-  diag(n)
D_temp <- rbind(matrix(0, 1, n), diag(1, n - 1, n))
D_temp <- (I_n - D_temp) %*% (I_n - D_temp)
D <- t( D_temp[3:n, ] )
# Equation 4 in PJ
S <- solve( I_n + lambda * D %*% t(D) )
mS = diag(n) - S
## the simple HP-filter
if(iter==FALSE){
message("conducted the simple HP filter")
# get the trend and cycle
x_f <- S %*% x
x_c <- x - x_f
result <-list(cycle = x_c, trend_hist = x_f, trend = x - x_c)
}
####################################################
## the boosted HP filter
if (test_type == "adf"){
message("iterated HP filter with ADF test criterion")
} else if ( test_type == "BIC"){
message( "iterated HP filter with BIC criterion")
}  else if ( test_type == "none" ) {
message( "iterated HP filter until Max_Iter")
}
iter
r <- 0
x_c_r <- x
x_f <- matrix(0, n, Max_Iter + 1)
IC <- rep(0, Max_Iter + 1)
IC_decrease = TRUE
x_f
I_S_0 = diag(n) - S
c_HP = I_S_0 %*% x
I_S_r = I_S_0
while( r < Max_Iter + 1) {
r <- r + 1
x_c_r = I_S_r %*% x  # this is the cyclical component after m iterations
x_f[, r] = x - x_c_r
B_r <- diag(n) -  I_S_r
IC[r] =   var (x_c_r ) / var( c_HP ) +  log( n )/ (n - sum(diag (S) ) ) * sum( diag( B_r ) )
I_S_r = I_S_0 %*% I_S_r # update for the next round
if  ( (r >= 2) & (  test_type == "BIC") )  {
if (  IC[r-1] < IC[r] )   { break  }
}
} # end of the while loop
r - 1
source("BoostedHP.R")
BoostedHP(IRE,1600,Max_Iter = 1)
# final assignment
R = r - 1;
x_f <- as.matrix(x_f[, 1:R])
x_c <- x - x_f[,R]
x_c
cycle = x_c
cycle
BoostedHP(IRE,1600,Max_Iter = 1)
trend_hist = x_f
x_c
x- x_c
BoostedHP(IRE,1600,Max_Iter = 1)
a <- BoostedHP(IRE,1600,Max_Iter = 1)
a$cycle
a$cycle[1]
a <- BoostedHP(IRE,1600,Max_Iter = 1)
x
# Require Package: tseries, expm
library(tseries)
library(expm)
# Require Package: tseries, expm
# Inputs
#   x: a univariate time series
#   lambda: the tuning parameter in the HP filter (base learner). Default is 1600.
#   iter: logical.
#       If iter = FALSE, the function returns the simple HP filter (fit only once).
#       If iter = TRUE, the boosted HP filter.
#   test_type (stopping criterion):
#       If ="adf" or "BIC", the two stopping criteria in the paper.
#       If = "none", iterated until Max_Iter
#   sig_p: the significance level of the ADF test as the stopping criterion.
#           It is useful only when test_type == "adf".
#   Max_Iter: the maximum number of iterations.
# Outputs
#   $cycle: the cyclical components in the final round
#   $trend: the trend component in the final round
#   $trend_hist: the estimated trend in each iteration
#   $iter_num: the total number of iterations
#   $IC_hist: the path of the information criterion along the iterations
#   $adf_p_hist: the path of the ADF test p-value along the iterations
if (!is.numeric(x) || anyNA(x) ) {
stop("argument is not numeric or containing NAs: returning NA")
return(NA_real_)
}
## generating trend operator matrix "S"
n <- length(x) # data size
I_n <-  diag(n)
D_temp <- rbind(matrix(0, 1, n), diag(1, n - 1, n))
D_temp <- (I_n - D_temp) %*% (I_n - D_temp)
D <- t( D_temp[3:n, ] )
# Equation 4 in PJ
S <- solve( I_n + lambda * D %*% t(D) )
mS = diag(n) - S
## the simple HP-filter
if(iter==FALSE){
message("conducted the simple HP filter")
# get the trend and cycle
x_f <- S %*% x
x_c <- x - x_f
result <-list(cycle = x_c, trend_hist = x_f, trend = x - x_c)
}
####################################################
## the boosted HP filter
if(iter==TRUE) {
if (test_type == "adf"){
message("iterated HP filter with ADF test criterion")
} else if ( test_type == "BIC"){
message( "iterated HP filter with BIC criterion")
}  else if ( test_type == "none" ) {
message( "iterated HP filter until Max_Iter")
}
### ADF test as the stopping criterion
if (test_type =="adf"  ) {
r <- 1
stationary <- FALSE
x_c <- x
x_f <- matrix(0, n, Max_Iter)
adf_p <- rep(0, Max_Iter)
while( (r <= Max_Iter) & (stationary == FALSE)){
x_c <- ( diag(n) - S ) %*% x_c # update
x_f[, r] <- x - x_c
adf_p_r <- adf.test(x_c, alternative = "stationary")$p.value
# x_c is the residual after the mean and linear trend being removed by HP filter
# we use the critical value for the ADF distribution with
# the intercept and linear trend specification
adf_p[r] <- adf_p_r
sig_p = sig_p # + 0.001 # due to the way that R reports the p-value
if(test_type == "adf")   stationary <- (adf_p_r <= sig_p)
# Truncate the storage matrix and vectors
if(stationary == TRUE){
R <- r
x_f <- x_f[, 1:R]
adf_p <- adf_p[1:R]
break
}
r <- r + 1
} # end the while loop
if( r > Max_Iter){
R <- Max_Iter
warning("The number of iterations exceeds the limit.
The residual cycle remains non-stationary.")
}
result <- list( cycle = x_c, trend_hist = x_f,  test_type = test_type,
adf_p_hist= adf_p, iter_num = R,
trend  = x - x_c)
} else  {
# assignment
r <- 0
x_c_r <- x
x_f <- matrix(0, n, Max_Iter + 1)
IC <- rep(0, Max_Iter + 1)
IC_decrease = TRUE
I_S_0 = diag(n) - S
c_HP = I_S_0 %*% x
I_S_r = I_S_0
while( r < Max_Iter + 1) {
r <- r + 1
x_c_r = I_S_r %*% x  # this is the cyclical component after m iterations
x_f[, r] = x - x_c_r
B_r <- diag(n) -  I_S_r
IC[r] =   var (x_c_r ) / var( c_HP ) +  log( n )/ (n - sum(diag (S) ) ) * sum( diag( B_r ) )
I_S_r = I_S_0 %*% I_S_r # update for the next round
if  ( (r >= 2) & (  test_type == "BIC") )  {
if (  IC[r-1] < IC[r] )   { break  }
}
} # end of the while loop
# the message
# final assignment
R = r - 1;
x_f <- as.matrix(x_f[, 1:R])
x_c <- x - x_f[,R]
print(x_f)
print(x_c)
# browser()
result <- list( cycle = x_c, trend_hist = x_f,  test_type = test_type,
IC_hist = IC, iter_num = R, trend =  x- x_c  )
}
} # end the boosted HP
source("BoostedHP.R")
a <- BoostedHP(IRE,1600,Max_Iter = 1)
a$cycle
a <- BoostedHP(IRE,1600,Max_Iter = 1)
a
a <- BoostedHP(IRE,1600,Max_Iter = 2)
a
trend_hist = x_f[, 1:R]
1:R]
1:R]
1:R
1:R
1:R
1:R
getwd()
setwd("D:\\mzw\\github_repo\\Boosted_HP_App")
runApp()
mdf_HP_plot
dim(mdf_HP_plot)
runApp()
bt_results <- BoostedHP(IRE, 1600, Max_Iter = 1)
cycle <- bt_results$cycle
trend_hist <- bt_results$trend_hist
trend <- bt_results$trend
rawdata <- cycle + trend
test_type <- bt_results$test_type
if (test_type == "BIC" || test_type == "none"){
history <- bt_results$IC_hist
hist_title <- "IC value history"
}
if (test_type == "adf"){
history <- bt_results$adf_p_hist
hist_title <- "ADF test p-value history"
}
Date = NULL
Frequency = NULL
if (is.null(Frequency) || is.null(Date) ){
Date_series = 1:length(cycle)
}else{
Date_series = seq(from = Date, length.out = length(cycle), by = Frequency)
}
leg <- length(rawdata)
leg_h <- length(history)
mdf_HP_plot <- melt(trend_hist)
if (dim(mdf_HP_plot)[,2]==2){
mdf_HP_plot$value = mdf_HP_plot[,2]
mdf_HP_plot[,2] = 1
}
mdf_HP_plot <- melt(trend_hist)
if (dim(mdf_HP_plot)[2]==2){
mdf_HP_plot$value = mdf_HP_plot[,2]
mdf_HP_plot[,2] = 1
}
mdf_HP_plot
mdf_HP_plot <- melt(trend_hist)
mdf_HP_plot
melt(trend_hist)
mdf_HP_plot <- melt(trend_hist)
if (dim(mdf_HP_plot)[2]==1){
mdf_HP_plot$time = 1:dim(mdf_HP_plot)[1]
mdf_HP_plot$trend = 1
}else{colnames(mdf_HP_plot) <- c("time","trend","value")}
mdf_HP_plot
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
bt_results <- BoostedHP(IRE, 1600, test_type = "adf")
bt_results$iter_num
runApp()
rsconnect::deployApp('D:\\mzw\\github_repo\\Boosted_HP_App')
